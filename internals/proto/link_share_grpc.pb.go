// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkShortServiceClient is the client API for LinkShortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkShortServiceClient interface {
	CreateLinkShort(ctx context.Context, in *LinkFull, opts ...grpc.CallOption) (*ResultLinkShort, error)
	TakeLinkFull(ctx context.Context, in *LinkShort, opts ...grpc.CallOption) (*ResultLinkFull, error)
}

type linkShortServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkShortServiceClient(cc grpc.ClientConnInterface) LinkShortServiceClient {
	return &linkShortServiceClient{cc}
}

func (c *linkShortServiceClient) CreateLinkShort(ctx context.Context, in *LinkFull, opts ...grpc.CallOption) (*ResultLinkShort, error) {
	out := new(ResultLinkShort)
	err := c.cc.Invoke(ctx, "/proto.LinkShortService/CreateLinkShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkShortServiceClient) TakeLinkFull(ctx context.Context, in *LinkShort, opts ...grpc.CallOption) (*ResultLinkFull, error) {
	out := new(ResultLinkFull)
	err := c.cc.Invoke(ctx, "/proto.LinkShortService/TakeLinkFull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkShortServiceServer is the server API for LinkShortService service.
// All implementations should embed UnimplementedLinkShortServiceServer
// for forward compatibility
type LinkShortServiceServer interface {
	CreateLinkShort(context.Context, *LinkFull) (*ResultLinkShort, error)
	TakeLinkFull(context.Context, *LinkShort) (*ResultLinkFull, error)
}

// UnimplementedLinkShortServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLinkShortServiceServer struct {
}

func (UnimplementedLinkShortServiceServer) CreateLinkShort(context.Context, *LinkFull) (*ResultLinkShort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLinkShort not implemented")
}
func (UnimplementedLinkShortServiceServer) TakeLinkFull(context.Context, *LinkShort) (*ResultLinkFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeLinkFull not implemented")
}

// UnsafeLinkShortServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkShortServiceServer will
// result in compilation errors.
type UnsafeLinkShortServiceServer interface {
	mustEmbedUnimplementedLinkShortServiceServer()
}

func RegisterLinkShortServiceServer(s grpc.ServiceRegistrar, srv LinkShortServiceServer) {
	s.RegisterService(&LinkShortService_ServiceDesc, srv)
}

func _LinkShortService_CreateLinkShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkFull)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkShortServiceServer).CreateLinkShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LinkShortService/CreateLinkShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkShortServiceServer).CreateLinkShort(ctx, req.(*LinkFull))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkShortService_TakeLinkFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkShort)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkShortServiceServer).TakeLinkFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LinkShortService/TakeLinkFull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkShortServiceServer).TakeLinkFull(ctx, req.(*LinkShort))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkShortService_ServiceDesc is the grpc.ServiceDesc for LinkShortService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkShortService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LinkShortService",
	HandlerType: (*LinkShortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLinkShort",
			Handler:    _LinkShortService_CreateLinkShort_Handler,
		},
		{
			MethodName: "TakeLinkFull",
			Handler:    _LinkShortService_TakeLinkFull_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "link_share.proto",
}
